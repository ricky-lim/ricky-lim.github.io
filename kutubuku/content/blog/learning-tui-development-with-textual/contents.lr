title: Learning TUI Development with Textual
---
author: Ricky Lim
---
pub_date: 2025-09-02
---
main_image: image.png
---
body:

When developing tools that require user interaction, we often turn to web-based graphical user interfaces (GUIs).
While web development provides rich interactivity and internet-friendly accessibility, it also introduces significant overhead in terms of development and maintenance.

For medium to large, complex projects, the trade-offs usually justify choosing a web application.
However, for small projects—often created by a single developer to support just a handful of users—web development can be overkilled.

## TUI

As an alternative, I'm exploring TUIs or Textual User Interface development.
With textual, TUIs offer a unique combination of a simple terminal environment paired with web-like interactivity, powered by the boring and yet powerful CSS.
This makes Textual a practial option for anyone who want to bring interactivity to their python scripts, without the overhead of full web development.

In this blog post, I share my experience learning Textual by following its tutorial to build a simple, yet terminally beautiful, timer.
Here’s how it looks in action:

https://github.com/user-attachments/assets/ed19e408-b7e3-4a1c-9206-9d97c250969c

Along the way, I picked up a few lessons. Here’s what I learned:


1\. Keyboard-driven interactions made easy

I’m a huge fan of keyboard shortcuts, so having them in any terminal app is a must for me.
Textual makes mapping shortcuts incredibly intuitive—just prefix your keyboard action methods with `action_`, and you’re good to go.
For example, here’s how you can create a shortcut to toggle between dark and light mode using Ctrl+D:

```python
class TimerApp(App):
    BINDINGS = [
        ("ctrl+d", "toggle_dark", "Toggle dark mode"),
        ...
    ]

    def action_toggle_dark(self) -> None:
        self.theme = (
            "textual-dark" if self.theme == "textual-light" else "textual-light"
        )
```

2\. Custom widgets with reactive variables

Textual also makes it easy to build custom widgets that automatically update whenever their state changes.
By marking a variable as reactive, you can let Textual handle re-rendering for you.
Then, simply define a handler method prefixed with `watch_` to react to those changes.

For example, here’s a custom countdown display widget that updates continuously the `remaining_time`:

```python
class TimeDisplay(Digits):
    """Countdown display with beep on finish."""

    remaining_time: float = reactive(0.0)


    def watch_remaining_time(self) -> None:
        time = self.remaining_time
        time, seconds = divmod(time, 60)
        hours, minutes = divmod(time, 60)
        time_string = f"{hours:02.0f}:{minutes:02.0f}:{seconds:05.2f}"
        self.update(time_string)

```

3\. Simple Frame rendering

For smooth animations, Textual provides the set_interval method within widgets to control frame rendering.
This makes it straightforward to add animated elements to your TUI without much extra effort.
Here’s an example that sets up a 60 FPS update loop for the countdown display:

```python

class TimeDisplay(Digits):
    """Countdown display with beep on finish."""

    def on_mount(self) -> None:
        self._timer = self.set_interval(1 / 60, self.update_remaining_time, pause=True)
```

4\. Separation of Logic and Style

Textual cleanly separates application logic from styling by using CSS (or its own tcss variant).
This makes UI tweaks much easier to manage and iterate on without touching the underlying code.
Even better, with tools like `textual-dev`, styles are hot-reloaded as you make changes—giving you a much first-class developer experience.


## Challenges and Final Thoughts

One challenge I ran into was state management, especially when working with multiple custom widgets.
Designing carefully is important to avoid juggling too many Python variables as application state.
Reactive variables help, but they also require attention—properly handling state changes is key to preventing memory leaks.

Having said that, my overall Textual experience has been positive, balancing simplicity and usability.

If you're curious about building TUI, following their Textual tutorial is an excellent start.
And if you'd like to experiment with my timer TUI project, feel free to explore my github repo:https://github.com/ricky-lim/timertui/tree/main.
